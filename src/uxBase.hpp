/*
Copyright 2024-2025 Wafflecat Games, LLC

This file is part of The Descent of Herld.

The Descent of Herld is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

The Descent of Herld is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with The Descent of Herld. If not, see <https://www.gnu.org/licenses/>.

Stable and intermediate releases may be made continually. For this reason, a year range is used in the above copyrihgt declaration. I intend to keep the "working copy" publicly visible, even if it is not functional. I consider every push to this publicly visible repository as a release. Releases intended to be stable will be marked as such via git tag or similar feature.
*/

#pragma once

#include <glm/glm.hpp>

namespace doh {

  /*
    L1 gui elements (like guiRect, guiText) are simply onion (gpu) objects with no interaction or dynamic content themselves. L1 elements are implemented as stubs generated by onionHelper.
    L2 gui elements (like uxButton, uxPanel) have the ux prefix and are composed of one or more L1 and/or L2 elements, and control those elements' position and visibility (by destroying and recreating them in response to other events). L2 elements have a common base type.
   */

  //should be in transient storage, probably populated by a spunUp
  struct uxBase {
  protected:
    //a component should only be visible if it and all its ancestors are visible, so track those separately
    //implementations' use of these flags is optional
    bool visible = false;//if this component is visible right now
    bool wantsVisibility = false;//if this component would be visible if all its ancestors are
  public:
    uxBase();
    uxBase(const uxBase&) = delete;//copy/move is a bad idea bc uxPanel keeps pointers to these
    virtual ~uxBase() = default;
    virtual void setBounds(const glm::vec4&) = 0;
    virtual void setVisible(bool visible);
    virtual void updateVisible(bool parentVisible) = 0;
    virtual const glm::vec4& getBounds() const = 0;
    virtual bool isVisible() const;
    virtual void update();//default noop
    bool isHovered(glm::vec2* = NULL) const;
  };

}
